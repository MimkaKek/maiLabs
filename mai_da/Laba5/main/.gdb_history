q
break Task()
break GetLowest(unsigned long, TNode*) 
run < test
continue 
continue 
p strLength 
p str.length()
p str.length() / 2
p *right
p pos->right
p *pos->right
break GetLowest(unsigned long, TNode*) 
break Task
run < test
continue 
break Task
break GetLowest(unsigned long, TNode*) 
ls
run < test
continue 
break 123
continue 
n
p str[pos->getRight() - delta]
p str[pos->getRight() - delta + 1]
p str[pos->getRight() - delta + 2]
p str[pos->getRight() - delta + 3]
p str[pos->getRight() - delta + 4]
p str[pos->getRight() - delta + 5]
p str[pos->getRight() - delta + 6]
p str[pos->getRight() - delta + 7]
p str[pos->getRight() - delta + 8]
p str[pos->getRight() - delta + 9]
p str[pos->getRight() - delta + 10]
p str[pos->getRight() - delta + 11]
p str[pos->getRight() - delta + 12]
p str[pos->getRight() - delta + 13]
run
run < test
n
run < test
break GetLowest(unsigned long, TNode*) 
break Task() 
run < test
continue 
break 123
continue 
until 123
n
continue 
run < test
continue 
n
continue 
n
p delta
p pos->getRight()
n
p p
break genVector() 
run < main
n
p edges
break Task() 
break GetLowest(unsigned long, TNode*) 
run
n
p *root
p root->sEdges[0]
p root->sEdges[0]->first
n
s
p root->sEdges[0]->first
s
n
p root->sEdges[i]->first
s
n
sn
n
s
continue 
n
n
p delta
p str[pos->getRight()]
n
p str[p]
p str[pos->getLeft()]
p str[pos->getLeft() + 1]
p str[pos->getLeft() + 2]
p str[pos->getLeft() + 3]
p str[pos->getLeft() + 4]
p str[pos->getLeft() + 5]
p str[0x41d890->getLeft() + 5]
p str[1]
p str[2]
p str[3]
p str[4]
p str[5]
p str[pos->getLeft()]
break GetLowest(unsigned long, TNode*) 
break Task() 
run < test
n
p root->sEdges 
p root->sEdges[0]
p root->sEdges[0]->first
break GetLowest(unsigned long, TNode*) 
break Task() 
run < test
break Task() 
run < test
n
p pos
run < test
run < test
run < test
run < test
break Task() 
break GetLowest(unsigned long, TNode*) 
run < test
n
p pos
p root->list 
p root->list.begin
p *root->list.begin
p *root->list.begin->next
p *root->list.begin->next->next
p root->list.popItem()
p root->list.popItem()
p root->list.popItem()
p root->list.popItem()
p root->list.popItem()
p root->list.popItem()
p root->list.popItem()
p root->list.popItem()
p root->list.popItem()
p root->list.popItem()
p root->list.popItem()
p root->list.popItem()
p root->list.popItem()
p root->list.popItem()
p root->list.popItem()
p root->list.popItem()
run < test
p pos
n
p pos
run < test
p root->list.popItem()
p 'a'
break Task
break Task()
break GetLowest(unsigned long, TNode*) 
run < test
display pos
n
run < test
n
run < test
backtrace 
p (TNode*) 0x420d70
p *((TNode*) 0x420d70)
p ((TNode*) 0x420d70)->list->begin
p *((TNode*) 0x420d70)->list->begin
p *((TNode*) 0x420d70)->list->begin->next
p *((TNode*) 0x420d70)->list->begin->next->next
backtrace
frame 4
p pos
frame 3
p pos
frame 2
p pos
frame 2
p pos
frame 3
p pos
frame 2
break 284
run < test
backtrace
frame 2
list
list 284
break GetLowest(unsigned long, TNode*) 
run < test
break Phase(unsigned long) 
run < test
n
p *root
p nullptr
p edges[0]
p root->edges[0]
n
n
p activeNode->list
p activeNode->list->begin
p activeNode->list->begin->n
p activeNode->list->begin->next->n
list 285
break 283
run < test
backtrace 
break Task() 
break GetLowest(unsigned long, TNode*) 
run < test
n
p pos
n
p pos
p END
n
p root->edges[pos]
p *root->edges[pos]
n
n
n
s
break Task() 
break GetLowest(unsigned long, TNode*) 
run < test
n
p pos
n
p pos
p node->edges[pos]
reverse-step
run < test
continue 
run < test
continue 
run < test
continue 
n
